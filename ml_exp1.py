# -*- coding: utf-8 -*-
"""ML - exp1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f1CGGa1Hq4spl1nqUrgN4wDWF1IdEUlO

FIND S ALGORTHM
"""

# Step 1: Download and unzip the dataset quietly
!wget -q -O ml_exp1.zip https://github.com/shalinisubramaniam/ML-exp1/archive/refs/heads/main.zip
!unzip -q -o ml_exp1.zip
!mv ML-exp1-main/shopping_trends.csv .

# Step 2: Import pandas and load the dataset
import pandas as pd
df = pd.read_csv("shopping_trends.csv")

# Your existing code starts here
item_counts = df['Item Purchased'].value_counts()
most_bought_item = item_counts.idxmax()
least_bought_item = item_counts.idxmin()

print("Most bought item:", most_bought_item)
print("Least bought item:", least_bought_item)

positive_examples_most = df[df['Item Purchased'] == most_bought_item]
positive_examples_least = df[df['Item Purchased'] == least_bought_item]

features = ['Age', 'Gender', 'Category', 'Size', 'Color', 'Season', 'Discount Applied']

data_most = positive_examples_most[features]
data_least = positive_examples_least[features]

def find_s_algorithm(data):
    if data.empty:
        print("No positive examples found.")
        return None

    hypothesis = data.iloc[0].values

    for i in range(1, len(data)):
        for j in range(len(hypothesis)):
            if hypothesis[j] != data.iloc[i, j]:
                hypothesis[j] = '?'
    return hypothesis

most_specific_hypothesis_most = find_s_algorithm(data_most)
print("Most specific hypothesis for most bought item (Find-S):", most_specific_hypothesis_most)

most_specific_hypothesis_least = find_s_algorithm(data_least)
print("Most specific hypothesis for least bought item (Find-S):", most_specific_hypothesis_least)

def suggest_product(new_customer_attributes):
    def matches_hypothesis(hypothesis, attributes):
        return all(h == '?' or h == a for h, a in zip(hypothesis, attributes))

    def generalized_match(attributes):
        for hypothesis in [most_specific_hypothesis_most, most_specific_hypothesis_least]:
            if hypothesis is not None and matches_hypothesis(hypothesis, attributes):
                return most_bought_item if hypothesis == most_specific_hypothesis_most else least_bought_item
        return "No specific match, suggesting based on popularity."

    new_customer_attrs = [new_customer_attributes.get(feature, '?') for feature in features]

    suggestion = generalized_match(new_customer_attrs)
    if suggestion == "No specific match, suggesting based on popularity.":
        return most_bought_item

    return suggestion

new_customer_attributes = {
    'Age': '25-34',
    'Gender': 'Female',
    'Category': 'Electronics',
    'Size': 'M',
    'Color': 'Black',
    'Season': 'Summer',
    'Discount Applied': 'Yes'
}

suggested_product = suggest_product(new_customer_attributes)
print("\n")
print(f"Suggested product for the new customer: {suggested_product}")

# Step 1: Download and unzip the dataset quietly
!wget -q -O ml_exp1.zip https://github.com/shalinisubramaniam/ML-exp1/archive/refs/heads/main.zip
!unzip -q -o ml_exp1.zip
!mv ML-exp1-main/shopping_trends.csv .

# Step 2: Import pandas and load the dataset
import pandas as pd
df = pd.read_csv("/content/ML-exp1-main/shopping_trends.csv")

# Your existing code starts here
item_counts = df['Item Purchased'].value_counts()
most_bought_item = item_counts.idxmax()
least_bought_item = item_counts.idxmin()

print("Most bought item:", most_bought_item)
print("Least bought item:", least_bought_item)

positive_examples_most = df[df['Item Purchased'] == most_bought_item]
positive_examples_least = df[df['Item Purchased'] == least_bought_item]

features = ['Age', 'Gender', 'Category', 'Size', 'Color', 'Season', 'Discount Applied']

data_most = positive_examples_most[features]
data_least = positive_examples_least[features]

# Candidate Elimination Algorithm implementation with tuple conversion
def candidate_elimination_algorithm(data):
    S = data.iloc[0].values  # Initialize S with the first positive example
    G = [tuple(['?'] * len(S))]  # Initialize G with the most general hypothesis as a tuple

    for i in range(1, len(data)):
        example = data.iloc[i].values
        # Update S and G for a positive example
        for j in range(len(S)):
            if S[j] != example[j]:  # Specialize S if necessary
                S[j] = '?'

        # Remove inconsistent hypotheses from G
        G = [g for g in G if all(s == '?' or s == g[j] or g[j] == '?' for j, s in enumerate(S))]

        # Add minimal generalizations to G
        for j in range(len(S)):
            if S[j] == '?':
                new_hypothesis = tuple(S.copy())
                new_hypothesis = new_hypothesis[:j] + (example[j],) + new_hypothesis[j+1:]
                if new_hypothesis not in G:
                    G.append(new_hypothesis)

    return S, G

# Applying the Candidate Elimination Algorithm for both the most and least bought items
specific_hypothesis_most, general_hypothesis_most = candidate_elimination_algorithm(data_most)
specific_hypothesis_least, general_hypothesis_least = candidate_elimination_algorithm(data_least)

print("Specific hypothesis for most bought item (Candidate Elimination):", specific_hypothesis_most)
print("General hypothesis for most bought item (Candidate Elimination):", general_hypothesis_most)
print("Specific hypothesis for least bought item (Candidate Elimination):", specific_hypothesis_least)
print("General hypothesis for least bought item (Candidate Elimination):", general_hypothesis_least)

# Product suggestion based on new customer attributes and the learned hypotheses
def suggest_product(new_customer_attributes):
    def matches_hypothesis(hypotheses, attributes):
        for hypothesis in hypotheses:
            if all(h == '?' or h == a for h, a in zip(hypothesis, attributes)):
                return True
        return False

    new_customer_attrs = [new_customer_attributes.get(feature, '?') for feature in features]

    if matches_hypothesis([specific_hypothesis_most], new_customer_attrs):
        return most_bought_item
    elif matches_hypothesis([specific_hypothesis_least], new_customer_attrs):
        return least_bought_item
    elif matches_hypothesis(general_hypothesis_most, new_customer_attrs):
        return most_bought_item
    elif matches_hypothesis(general_hypothesis_least, new_customer_attrs):
        return least_bought_item
    else:
        return "No specific match, suggesting based on popularity."

new_customer_attributes = {
    'Age': '25-34',
    'Gender': 'Female',
    'Category': 'Electronics',
    'Size': 'M',
    'Color': 'Black',
    'Season': 'Summer',
    'Discount Applied': 'Yes'
}

suggested_product = suggest_product(new_customer_attributes)
print("\n")
print(f"Suggested product for the new customer: {suggested_product}")